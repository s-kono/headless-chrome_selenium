#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import chromedriver_binary # noqa # or pip3 install chromedriver-binary-auto
import json
import os
import sys
import time
from selenium import webdriver
# from selenium.common.exceptions import InvalidArgumentException
from selenium.common.exceptions import InvalidCookieDomainException, TimeoutException
from datetime import datetime, timedelta, timezone
from urllib.parse import urlparse


def parser():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('-u', '--useragent', help='User Agent', required=False)
    parser.add_argument('-o', '--output', help='Output File', required=False)
    # parser.add_argument('-r', '--referer', help='Referer', required=False)
    parser.add_argument('-l', '--url', help='URL', required=True)
    parser.add_argument('-x', '--proxy', help='Proxy', required=False)
    parser.add_argument('-a', '--pauth', help='Proxy Auth', required=False)
    parser.add_argument('-e', '--erroroutput', help='Error Output', required=False)
    parser.add_argument('-t', '--timeout', help='Timeout', required=False)
    parser.add_argument('-c', '--cachedir', help='Cache Dir', required=False)
    parser.add_argument('-w', '--windowsize', help='WindowSize', required=False)
    parser.add_argument('-r', '--resize', help='WindowResize', required=False)
    parser.add_argument('-s', '--screenshot', help='ScreenShot', required=False)
    return parser.parse_args()


def eprint(eout, e, flag_timeout=False):
    if flag_timeout:
        e = "Timeout"
    if eout is None:
        print(
          'err: [%s]' % datetime.now(
            timezone(timedelta(hours=9), 'JST')
          ).strftime('%Y-%m-%dT%H:%M:%S%z'),
          '"%s"' % e,
          sys.argv,
          file=sys.stderr
        )
    else:
        with open(eout, 'a') as elog:
            print(
              'err: [%s]' % datetime.now(
                timezone(timedelta(hours=9), 'JST')
              ).strftime('%Y-%m-%dT%H:%M:%S%z'),
              '"%s"' % e,
              sys.argv,
              file=elog
            )


def main(args):
    options = webdriver.ChromeOptions()
    options.add_argument('--window-size=1024,768')
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-setuid-sandbox')
    options.add_argument('--no-first-run')
    options.add_argument('--no-zygote')
    options.add_argument('--single-process')
    options.add_argument('--lang=ja')

    if args.cachedir is None:
        base_dir = os.environ['HOME']
    else:
        base_dir = args.cachedir
    cache_dir = base_dir + '/.chrome-cache'
    options.add_argument('--user-data-dir=%s' % (cache_dir))

    if args.useragent is not None:
        options.add_argument('--user-agent=' + args.useragent)
    if args.pauth is not None:
        options.add_argument('--proxy-auth=%s' % args.pauth)
    if args.proxy is not None:
        options.add_argument('--proxy-server=%s' % args.proxy)
    if args.windowsize is not None:
        options.add_argument('--window-size=%s' % args.windowsize)

    timeout = 10
    if args.timeout is not None:
        timeout = args.timeout

    try:
        cookie_path = cache_dir + '/.cookie_' + str(urlparse(args.url).netloc)
        with open(cookie_path, 'r') as file_path:
            cookies_list = json.loads(file_path.read())
    except Exception:
        cookies_list = []

    try:
        driver = webdriver.Chrome(options=options)
        driver.set_page_load_timeout(timeout)
        driver.get(urlparse(args.url).scheme + '://' + str(urlparse(args.url).hostname) + '/')
        time.sleep(1)
        if len(cookies_list) > 0:
            driver.delete_all_cookies()
            for cookie in cookies_list:
                driver.add_cookie(cookie)
    except InvalidCookieDomainException as e:
        eprint(args.erroroutput, e)
        if driver.current_url != args.url:
            eprint(args.erroroutput, 'redirect(InvalidCookieDomain): ' + args.url + ' => ' + driver.current_url)
        driver.quit()
        sys.exit(1)
    except TimeoutException:
        pass
    except Exception as e:
        eprint(args.erroroutput, e)
        driver.quit()
        sys.exit(1)

    try:
        driver.set_page_load_timeout(timeout)
        # driver.refresh()
        driver.get(args.url)
        time.sleep(3)
    except TimeoutException as e:
        eprint(args.erroroutput, e, True)
        pass
    except Exception as e:
        eprint(args.erroroutput, e)
        driver.quit()
        sys.exit(1)

    try:
        if args.windowsize is None:
            page_width = driver.execute_script('return document.body.scrollWidth')
            page_height = driver.execute_script('return document.body.scrollHeight')
            driver.set_window_size(page_width, page_height)
        if args.resize is not None:
            page_width = driver.execute_script('return document.body.scrollWidth')
            page_height = driver.execute_script('return document.body.scrollHeight')
            driver.set_window_size(page_width, page_height - int(args.resize))
    # except InvalidArgumentException as e:
    except Exception as e:
        eprint(args.erroroutput, e)
        driver.quit()
        sys.exit(1)

    try:
        # print(driver.title)
        if args.output is None:
            print(driver.page_source)
        else:
            with open(args.output, "w") as f:
                f.write(driver.page_source)
        if args.screenshot is not None:
            driver.save_screenshot(args.screenshot)
    except Exception as e:
        eprint(args.erroroutput, e)
        driver.quit()
        sys.exit(1)

    if driver.current_url == args.url:
        cookies_list = driver.get_cookies()
        with open(cookie_path, 'w') as file_path:
            json.dump(cookies_list, file_path, indent=2, sort_keys=True)
    else:
        eprint(args.erroroutput, 'redirect: ' + args.url + ' => ' + driver.current_url)

    driver.quit()


if __name__ == '__main__':
    main(parser())
